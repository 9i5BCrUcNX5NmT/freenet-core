"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeerChangeT = exports.PeerChange = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
const added_connection_js_1 = require("../topology/added-connection.js");
const peer_change_type_js_1 = require("../topology/peer-change-type.js");
class PeerChange {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }
  static getRootAsPeerChange(bb, obj) {
    return (obj || new PeerChange()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }
  static getSizePrefixedRootAsPeerChange(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new PeerChange()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }
  currentState(index, obj) {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new added_connection_js_1.AddedConnection()).__init(
          this.bb.__indirect(
            this.bb.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb
        )
      : null;
  }
  currentStateLength() {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  changeType() {
    const offset = this.bb.__offset(this.bb_pos, 6);
    return offset
      ? this.bb.readUint8(this.bb_pos + offset)
      : peer_change_type_js_1.PeerChangeType.NONE;
  }
  change(obj) {
    const offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
  }
  static startPeerChange(builder) {
    builder.startObject(3);
  }
  static addCurrentState(builder, currentStateOffset) {
    builder.addFieldOffset(0, currentStateOffset, 0);
  }
  static createCurrentStateVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]);
    }
    return builder.endVector();
  }
  static startCurrentStateVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addChangeType(builder, changeType) {
    builder.addFieldInt8(
      1,
      changeType,
      peer_change_type_js_1.PeerChangeType.NONE
    );
  }
  static addChange(builder, changeOffset) {
    builder.addFieldOffset(2, changeOffset, 0);
  }
  static endPeerChange(builder) {
    const offset = builder.endObject();
    return offset;
  }
  static createPeerChange(
    builder,
    currentStateOffset,
    changeType,
    changeOffset
  ) {
    PeerChange.startPeerChange(builder);
    PeerChange.addCurrentState(builder, currentStateOffset);
    PeerChange.addChangeType(builder, changeType);
    PeerChange.addChange(builder, changeOffset);
    return PeerChange.endPeerChange(builder);
  }
  unpack() {
    return new PeerChangeT(
      this.bb.createObjList(
        this.currentState.bind(this),
        this.currentStateLength()
      ),
      this.changeType(),
      (() => {
        const temp = (0, peer_change_type_js_1.unionToPeerChangeType)(
          this.changeType(),
          this.change.bind(this)
        );
        if (temp === null) {
          return null;
        }
        return temp.unpack();
      })()
    );
  }
  unpackTo(_o) {
    _o.currentState = this.bb.createObjList(
      this.currentState.bind(this),
      this.currentStateLength()
    );
    _o.changeType = this.changeType();
    _o.change = (() => {
      const temp = (0, peer_change_type_js_1.unionToPeerChangeType)(
        this.changeType(),
        this.change.bind(this)
      );
      if (temp === null) {
        return null;
      }
      return temp.unpack();
    })();
  }
}
exports.PeerChange = PeerChange;
class PeerChangeT {
  constructor(
    currentState = [],
    changeType = peer_change_type_js_1.PeerChangeType.NONE,
    change = null
  ) {
    this.currentState = currentState;
    this.changeType = changeType;
    this.change = change;
  }
  pack(builder) {
    const currentState = PeerChange.createCurrentStateVector(
      builder,
      builder.createObjectOffsetList(this.currentState)
    );
    const change = builder.createObjectOffset(this.change);
    return PeerChange.createPeerChange(
      builder,
      currentState,
      this.changeType,
      change
    );
  }
}
exports.PeerChangeT = PeerChangeT;
//# sourceMappingURL=peer-change.js.map
