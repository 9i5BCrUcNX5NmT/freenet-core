"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControllerResponseT = exports.ControllerResponse = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
const response_js_1 = require("../topology/response.js");
class ControllerResponse {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }
  static getRootAsControllerResponse(bb, obj) {
    return (obj || new ControllerResponse()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }
  static getSizePrefixedRootAsControllerResponse(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ControllerResponse()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }
  responseType() {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset
      ? this.bb.readUint8(this.bb_pos + offset)
      : response_js_1.Response.NONE;
  }
  response(obj) {
    const offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
  }
  static startControllerResponse(builder) {
    builder.startObject(2);
  }
  static addResponseType(builder, responseType) {
    builder.addFieldInt8(0, responseType, response_js_1.Response.NONE);
  }
  static addResponse(builder, responseOffset) {
    builder.addFieldOffset(1, responseOffset, 0);
  }
  static endControllerResponse(builder) {
    const offset = builder.endObject();
    builder.requiredField(offset, 6); // response
    return offset;
  }
  static createControllerResponse(builder, responseType, responseOffset) {
    ControllerResponse.startControllerResponse(builder);
    ControllerResponse.addResponseType(builder, responseType);
    ControllerResponse.addResponse(builder, responseOffset);
    return ControllerResponse.endControllerResponse(builder);
  }
  unpack() {
    return new ControllerResponseT(
      this.responseType(),
      (() => {
        const temp = (0, response_js_1.unionToResponse)(
          this.responseType(),
          this.response.bind(this)
        );
        if (temp === null) {
          return null;
        }
        return temp.unpack();
      })()
    );
  }
  unpackTo(_o) {
    _o.responseType = this.responseType();
    _o.response = (() => {
      const temp = (0, response_js_1.unionToResponse)(
        this.responseType(),
        this.response.bind(this)
      );
      if (temp === null) {
        return null;
      }
      return temp.unpack();
    })();
  }
}
exports.ControllerResponse = ControllerResponse;
class ControllerResponseT {
  constructor(responseType = response_js_1.Response.NONE, response = null) {
    this.responseType = responseType;
    this.response = response;
  }
  pack(builder) {
    const response = builder.createObjectOffset(this.response);
    return ControllerResponse.createControllerResponse(
      builder,
      this.responseType,
      response
    );
  }
}
exports.ControllerResponseT = ControllerResponseT;
//# sourceMappingURL=controller-response.js.map
