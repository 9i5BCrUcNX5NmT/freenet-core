// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class AddedConnection
  implements flatbuffers.IUnpackableObject<AddedConnectionT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): AddedConnection {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsAddedConnection(
    bb: flatbuffers.ByteBuffer,
    obj?: AddedConnection
  ): AddedConnection {
    return (obj || new AddedConnection()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsAddedConnection(
    bb: flatbuffers.ByteBuffer,
    obj?: AddedConnection
  ): AddedConnection {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new AddedConnection()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  from(): string | null;
  from(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  from(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  fromLocation(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  to(): string | null;
  to(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  to(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  toLocation(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  static startAddedConnection(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addFrom(builder: flatbuffers.Builder, fromOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, fromOffset, 0);
  }

  static addFromLocation(builder: flatbuffers.Builder, fromLocation: number) {
    builder.addFieldFloat64(1, fromLocation, 0.0);
  }

  static addTo(builder: flatbuffers.Builder, toOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, toOffset, 0);
  }

  static addToLocation(builder: flatbuffers.Builder, toLocation: number) {
    builder.addFieldFloat64(3, toLocation, 0.0);
  }

  static endAddedConnection(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // from
    builder.requiredField(offset, 8); // to
    return offset;
  }

  static createAddedConnection(
    builder: flatbuffers.Builder,
    fromOffset: flatbuffers.Offset,
    fromLocation: number,
    toOffset: flatbuffers.Offset,
    toLocation: number
  ): flatbuffers.Offset {
    AddedConnection.startAddedConnection(builder);
    AddedConnection.addFrom(builder, fromOffset);
    AddedConnection.addFromLocation(builder, fromLocation);
    AddedConnection.addTo(builder, toOffset);
    AddedConnection.addToLocation(builder, toLocation);
    return AddedConnection.endAddedConnection(builder);
  }

  unpack(): AddedConnectionT {
    return new AddedConnectionT(
      this.from(),
      this.fromLocation(),
      this.to(),
      this.toLocation()
    );
  }

  unpackTo(_o: AddedConnectionT): void {
    _o.from = this.from();
    _o.fromLocation = this.fromLocation();
    _o.to = this.to();
    _o.toLocation = this.toLocation();
  }
}

export class AddedConnectionT implements flatbuffers.IGeneratedObject {
  constructor(
    public from: string | Uint8Array | null = null,
    public fromLocation: number = 0.0,
    public to: string | Uint8Array | null = null,
    public toLocation: number = 0.0
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const from = this.from !== null ? builder.createString(this.from!) : 0;
    const to = this.to !== null ? builder.createString(this.to!) : 0;

    return AddedConnection.createAddedConnection(
      builder,
      from,
      this.fromLocation,
      to,
      this.toLocation
    );
  }
}
